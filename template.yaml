AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: Create VPC, subnets, security group, EFS, and AWS Batch

Resources:
  MountTargetSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: sandy-sg-jfrog
      GroupName: sandy-sg-jfrog
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: owner
          Value: sandy-efs
      VpcId: !Ref MountTargetVPC

  MountTargetVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags:
        - Key: owner
          Value: sandy-efs

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: owner
          Value: sandy-efs

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref MountTargetVPC

  MountTargetSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.1.0/24
      VpcId: !Ref MountTargetVPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: owner
          Value: sandy-efs

  MountTargetSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.2.0/24
      VpcId: !Ref MountTargetVPC
      AvailabilityZone: !Sub "${AWS::Region}b"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: owner
          Value: sandy-efs

  MountTargetSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.3.0/24
      VpcId: !Ref MountTargetVPC
      AvailabilityZone: !Sub "${AWS::Region}c"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: owner
          Value: sandy-efs

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref MountTargetSubnetOne

  PublicRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MountTargetVPC
      Tags:
        - Key: owner
          Value: sandy-efs

  PublicRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MountTargetVPC
      Tags:
        - Key: owner
          Value: sandy-efs

  PublicRouteTableThree:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MountTargetVPC
      Tags:
        - Key: owner
          Value: sandy-efs

  #RouteToIGWOne:
    #Type: AWS::EC2::Route
    #DependsOn: AttachIGW
    #Properties:
      #RouteTableId: !Ref PublicRouteTableOne
      #DestinationCidrBlock: 0.0.0.0/0
      #GatewayId: !Ref IGW

  RouteToINWOne:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PublicRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      #GatewayId: !Ref IGW

  RouteToIGWTwo:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref PublicRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  RouteToIGWThree:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref PublicRouteTableThree
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  AssociateRouteTableOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MountTargetSubnetOne
      RouteTableId: !Ref PublicRouteTableOne

  AssociateRouteTableTwo:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MountTargetSubnetTwo
      RouteTableId: !Ref PublicRouteTableTwo

  AssociateRouteTableThree:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MountTargetSubnetThree
      RouteTableId: !Ref PublicRouteTableThree

  FileSystemResource:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: maxIO
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: sandy-efs
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "elasticfilesystem:ClientMount"
              - "elasticfilesystem:ClientWrite"
            Principal:
              AWS: "*"

  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref MountTargetSubnetOne
      SecurityGroups:
        - !GetAtt MountTargetSG.GroupId

  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref MountTargetSubnetTwo
      SecurityGroups:
        - !GetAtt MountTargetSG.GroupId

  MountTargetResource3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref MountTargetSubnetThree
      SecurityGroups:
        - !GetAtt MountTargetSG.GroupId

  AccessPointResource:
    Type: "AWS::EFS::AccessPoint"
    Properties:
      FileSystemId: !Ref FileSystemResource
      PosixUser:
        Uid: "1000"
        Gid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "0777"
        Path: "/myefs"

  MyBatchJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: my-batch-job-definition
      ContainerProperties:
        Command:
          - "/app/function.sh"
        Image: 'public.ecr.aws/h4o2x6p7/kd3:latest'
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        FargatePlatformConfiguration:
          PlatformVersion: LATEST
        ExecutionRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole1'
        LogConfiguration:
          LogDriver: awslogs
        ResourceRequirements: 
          - Type: MEMORY
            Value: 4096
          - Type: VCPU
            Value: 2
        MountPoints:
          - SourceVolume: efsVolume
            ContainerPath: /mnt/efs
        Volumes: 
          - Name: efsVolume 
            EfsVolumeConfiguration: 
              FileSystemId: !Ref FileSystemResource
              RootDirectory: /
              TransitEncryption: ENABLED
              AuthorizationConfig: 
                AccessPointId: !Ref AccessPointResource
      PlatformCapabilities:
        - FARGATE

  MyComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      State: ENABLED
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 6
        Subnets:
          - !Ref MountTargetSubnetOne
          - !Ref MountTargetSubnetTwo
          - !Ref MountTargetSubnetThree
        SecurityGroupIds:
          - !GetAtt MountTargetSG.GroupId

  MyJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      State: ENABLED
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref MyComputeEnvironment

  EFSFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/efsFunction
      Handler: main.lambda_handler
      Runtime: python3.10
      VpcConfig:
        SecurityGroupIds:
          - !Ref MountTargetSG
        SubnetIds:
          - !Ref MountTargetSubnetOne
          - !Ref MountTargetSubnetTwo
          - !Ref MountTargetSubnetThree
      FileSystemConfigs:
        - Arn: !GetAtt AccessPointResource.Arn
          LocalMountPath: /mnt/efs
    DependsOn: FileSystemResource

  CloneRepo:
    DependsOn: AccessPointResource
    Type: AWS::Serverless::Function
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: lambda/clone-repo
      DockerTag: sandy-lambda-1
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Timeout: 900
      MemorySize: 1024
      VpcConfig:
        SecurityGroupIds:
          - !Ref MountTargetSG
        SubnetIds:
          - !Ref MountTargetSubnetOne
      FileSystemConfigs:
        - Arn: !GetAtt AccessPointResource.Arn
          LocalMountPath: /mnt/efs
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Sid: Admin
              Effect: Allow
              Action: "*"
              Resource: "*"

Outputs:
  MyComputeEnvironmentArn:
    Value: !Ref MyComputeEnvironment
    Description: ARN of the Batch compute environment
  MyJobQueueArn:
    Value: !Ref MyJobQueue
    Description: ARN of the Batch job queue
  MyBatchJobDefinitionArn:
    Value: !Ref MyBatchJobDefinition
    Description: ARN of the Batch job definition
